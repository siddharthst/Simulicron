Here are some thoughts on the selection function. 

1. The fitness function needs to be flexible. We have no real idea about the real shape and characteristics of selection on TEs. The algorithm thus needs to call a generic fitness() routine taking the genotype (TE content) as a parameter. How to do it in an elegant way in Python? In C, it would be a function pointer; in C++ a polymorphic class; in R a function passed as a parameter.
2. Ideally, the way to store fitness effects should not be deeply hard-coded. I liked the option Aurélie suggested last time (to assign fitness effetcs to insertion sites instead of TEs), but there might be situations where it may not apply (for instance, if we decide to encore an excised TE as a kind of inactive TE, the fitness effect should disappear). You can thus implement Aurélie's fitness model, but keeping in mind that we might have to change it at some point. Having a TE specific effect and a site specific effect could be an elegant solution (effects should be multiplied), so that we could easily switch between models (by setting all site effets to 1 or all TE effects to 1, for instance) or cancel one kind of effects (by setting them to 0). 

About the fitness function now. 

* The additive fitness function: w = 1 + sum_i s_i (if all sites have the same effect s, w = 1 + ns). 
This is the fitness function I used in my PhD. It is simple to compute, and seems straightforward. It also had a substantial advantage : it generates negative epistasis for log fitness, and thus allows for a transposition-selection equilibrium in the Charlesworth - Charlesworth model: 
  Delta n = n(u - v + ns/(1+ns))
  Delta n = 0 <=> u - v = -ns/(1+ns) <=> n(eq) = (u-v)/(-s(u-v+1)) from a back-of-an-enveloppe calculation
However, there are several issues with this model. 
  1) poor grounding in population genetics theory
  2) requires an inelegant if(w<0) w=0 boundary condition in the algorithm
  3) assumes that the average fitness is larger that the fitness standard deviation, otherwise the curvature of the fitness function is affected by this boundary at 0
  
* The multiplicative fitness function: w = prod_i (1 + s_i) (if all sites have the same effect s, w = (1+s)^n)
It is intuitive, but not easy to manipulate. The log-additive fitness function carries the very same idea, but is much more tractable and can easily be expanded to account for epistasis. 

* The log-additive fitness function w = exp(sum_i s_i) (or w = exp(ns) if all s_i are the same)
This function is both elegant and numerically stable, and grounds well into population genetics theory (no epistasis on log fitness). The "only" issue in the frame of the Charlesworth - Charlesworth model is that ot does not allow for a transposition - selection equilibrium:
  Delta n = n(u-v+s)
  n(t) ~ n0 exp(t(1+n+v-s))
The TE amplification/decay is thus exponential. Charlesworth knew this of course, and felt uncomfortable with this result so that he proposed a quadratic form. 

* The log-quadratic fitness function, if all s have the same effect w = exp(ns + 1/2 alpha n^2)
This function models epistasis on (log) fitness by a parameter alpha that can be positive, negative, or zero. This is quite flexible. The model grounds *very* well in standard population and quantitative genetics, as it handles the number of copies as a quantitative character under stabilizing Gaussian selection (which is the model underlying most of the evolutionary quantitative genetics literature. 
An equilibrium is possible in the Charlesworth-Charlesworth model, 
  Delta n = n(u-v+s-alpha n)
  Delta n = 0 <=> n(eq) = (u-v+s)/alpha (quick calculation, need to double check)
The problem is that this model does not make explicit how to compute fitness when TEs don't have the same effect. An elegant solution comes from the pairwise epistasis literature : w = sum_i s_i + sum_i sum_(j>i) s_i s_j epsilon_ij, where epsilon_ij is the directional epistasis coefficient between loci i and j as in e.g. Hansen & Wagner 2001. The first part of the equation stands for the additive contribution, and the second part to the pairwise epistatic contribution according to the multilinear model of epistasis. What is great with this model is that there is solid theory to show that any system with a complex pattern of pairwise epsilon_ij coefficients can be efficiently summarized by replacing specific epsilon_ij coefficients (n(n-1)/2 coefficients) by a single composite epsilon parameter (which is complicated to calculate from the epsilon_ij, but not our problem here). Thus, a model with a single epsilon parameter, w = sum_i s_i + sum_i sum_(j>i) s_i s_j epsilon, will be quite equivalent in terms of evolution to a much more complex model with many epsilon_ij parameters. The sign of epsilon is the sign of epistasis, and if epsilon=0, the model becomes purely additive. 
If all s_i are identical, then the model collapses to w = exp(ns + 1/2 epsilon s^2 n^2), which sounds very interesting (in particular, it shows that in the previous quadratic model, alpha was capturing both selection and epistasis on selection, which was confusing). 
